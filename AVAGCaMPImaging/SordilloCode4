#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep  9 15:04:35 2021

This code will remove duplicate frames created during tracking and inform you of tracks that are the wrong size
"""


def clean_imagejtracks(directory_in_str,newname,sizeneeded):
    #directory_in_str = where your files are
    #name you want to add to track files (experiment info, etc)
    #sizeneeded expected size of your file


    import pandas as pd
    import os


    directory= os.fsencode(directory_in_str)

   
    for file in os.listdir(directory):
        filename = os.fsdecode(file)
        if filename.startswith("LS_"): #find the correct files based on your naming convention (or can modify for filetype,etc)

            ls=pd.read_csv(directory_in_str+'/'+filename) # get data
        
            ls.name=filename.replace('.txt','').replace('.an','') #clean name generated by imagej
    
            if  'y' in ls.columns:
                  clean=ls[~ls.index.duplicated(keep='last')] #remove duplicate frames, keep last version in track
                  cleaner=clean.dropna(axis=0) #remove nans
                  newfile=cleaner['y'].copy()
                  newfile.name=ls.name
                  newfile.to_csv(newfile.name+newname+'.csv', index=False,header=False) #use newname to add any other info you want
                  if newfile.shape[0] != sizeneeded:
                      print(newfile.name+' is wrong size: '+str(newfile.shape[0])) #will inform you which tracks have the wrong number of frames
                  else:
                          continue

    
            else:
                  continue
         
        elif filename.startswith("GS_"): #find the correct files based on your naming convention (or can modify for filetype,etc)
                gs=pd.read_csv(directory_in_str+'/'+filename)
                gs.name=filename.replace('.txt','').replace('.an','')
     
  
                if  'y' in gs.columns:
                    clean=gs[~gs.index.duplicated(keep='last')]
                    cleaner=clean.dropna(axis=0)
                    newfile=cleaner['y'].copy()
                    newfile.name=gs.name
                    newfile.to_csv(newfile.name+newname+'.csv', index=False,header=False)
                    if newfile.shape[0] != sizeneeded:
                        print(newfile.name+' is wrong size: '+str(newfile.shape[0]))
                        
                    else:
                      continue
        else:
            continue
